version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
      # The staging branch.
      STAGING_BRANCH: "master"
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      #      - run:
      #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
      #         command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run Tests
          command: ./gradlew lint test
      - deploy:
          name: Deploy into Fabric with master branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "${STAGING_BRANCH}" ]; then
              gem update --system
              gem install bundler
              bundler update --bundler
              bundle install
              bundle exec fastlane beta api_token:"$FABRIC_API_TOKEN" build_secret:"$BUILD_SECRET"
              bundle exec fastlane notify_beta cw_api_token:"$CHATWORK_API_KEY"
            fi
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
      - run:
          name: Sending notification on fail
          when: on_fail
          command: |
            if [[ true ]];  then
              gem update --system
              gem install bundler
              bundler update --bundler
              bundle install
              bundle exec fastlane notify_build_failed circle_build_url:"$CIRCLE_BUILD_URL" circle_pull_request:"$CIRCLE_PULL_REQUEST" circle_branch:"$CIRCLE_BRANCH" cw_api_token:"$CHATWORK_API_KEY"
            fi

      - run:
          name: Sending notification on success
          when: on_success
          command: |
            if [[ "${CIRCLE_BRANCH}" != "${STAGING_BRANCH}" ]];  then
              gem update --system
              gem install bundler
              bundler update --bundler
              bundle install
              bundle exec fastlane notify_build_success circle_build_url:"$CIRCLE_BUILD_URL" circle_pull_request:"$CIRCLE_PULL_REQUEST" circle_branch:"$CIRCLE_BRANCH" cw_api_token:"$CHATWORK_API_KEY"
            fi

